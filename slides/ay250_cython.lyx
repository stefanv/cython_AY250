#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass powerdot
\begin_preamble
\usepackage{listings}
\pdsetup{%
  lf=G-Node Workshop---Trento 2010,
%  rf=NumPy: Kittens \& Dragons,
  logohook=t,
  palette=green,
  trans=Fade,
}

\pddefinetemplate[titleslide]{titleslide}
{
  lfpos={},
  rfpos={}
}
{
  \pdsetup{
    logopos={}
  }
}

\usepackage{color}
\definecolor{keywords}{RGB}{255,0,90}  
\definecolor{comments}{RGB}{60,60,60}
\definecolor{strings}{RGB}{60,150,90}
\lstset{language=Python,%
            basicstyle=\ttfamily\small,%
            keywordstyle=\color{keywords},%  
            commentstyle=\color{comments}\emph\ttfamily,%
            stringstyle=\color{strings},%
            showstringspaces=false,%  
            emph={Out}, emphstyle=\color{red},
}
\end_preamble
\options style=fyma,display=slides,mode=present,paper=screen
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize size=10
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation landscape
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
\begin_inset VSpace -0.8in
\end_inset

The Quest for Speed:
\begin_inset Newline newline
\end_inset

An Introduction to Cython
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\size small
Presented at the G-Node Autumn School on
\begin_inset Newline newline
\end_inset

Advanced Scientific Programming in Python,
\begin_inset Newline newline
\end_inset

 held in Trento, Italy
\size normal

\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Author
Stéfan van der Walt
\begin_inset Newline newline
\end_inset

Stellenbosch University, South Africa
\end_layout

\begin_layout Date
October, 2010
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
To print comments as well, set display=slidesnotes in the package settings.
\end_layout

\begin_layout Plain Layout
Valid paper sizes include screen and a4paper.
\end_layout

\begin_layout Plain Layout
The manual for powerdot is at 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.ctan.org/tex-archive/macros/latex/contrib/powerdot/doc/powerdot.pdf
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Plain Layout

\color red
IMPORTANT NOTE TO SELF: This file must be compiled using dvipdfm or ps2pdf,
 
\series bold
not
\series default
 the default LyX PDF button (pdflatex).
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Slide
Motivation
\end_layout

\begin_layout Standard
\align center
\begin_inset space \hspace{}
\length -2cm
\end_inset


\begin_inset Graphics
	filename /home/stefan/akad/voordragte/2010/trento/cython/sketse/lang_speed.png
	lyxscale 30
	width 100text%

\end_inset


\end_layout

\begin_layout Slide
Motivation (continued)
\end_layout

\begin_layout Itemize
Cython allows us to cross the gap!
\end_layout

\begin_layout Itemize
This is good news because
\end_layout

\begin_deeper
\begin_layout Itemize
we get to keep coding in Python (or something close to Python)
\end_layout

\begin_layout Itemize
we get the speed advantage of C
\end_layout

\end_deeper
\begin_layout Itemize
You can't have your cake and eat it.
 (
\emph on
Non si puo avere la botte piena è la moglie ubriaca
\emph default
.) But this comes pretty close!
\end_layout

\begin_layout Itemize
Cython originates from Pyrex (been used in NumPy's 
\family typewriter
mtrand
\family default
 module for a long time, e.g.); it is well maintained with an active user
 community, wide adoption.
\end_layout

\begin_layout Slide
Use Cases
\end_layout

\begin_layout Itemize
Optimising execution of Python code (profile, if possible!)
\end_layout

\begin_layout Itemize
Wrapping existing C, C++ (and soon Fortran) code
\end_layout

\begin_layout Itemize
Breaking out of the GIL!
\end_layout

\begin_layout Itemize
Mixing C and Python, but without the pain of the Python C API
\end_layout

\begin_layout Slide
Tutorial Overview
\end_layout

\begin_layout Standard
For this quick introduction, we'll take the following route:
\end_layout

\begin_layout Enumerate
Take a piece of pure Python code and benchmark (we'll find that it is too
 slow)
\end_layout

\begin_layout Enumerate
Run the code through Cython, compile and benchmark (we'll find that it is
 somewhat faster)
\end_layout

\begin_layout Enumerate
Annotate the types and benchmark (we'll find that it is much faster)
\end_layout

\begin_layout Standard
Then we'll look at how Cython allows us to
\end_layout

\begin_layout Itemize
Work with NumPy arrays
\end_layout

\begin_layout Itemize
Use multiple threads from Python
\end_layout

\begin_layout Itemize
Wrap native C libraries
\end_layout

\begin_layout Section
From Python to Cython
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Benchmark Python code
\end_layout

\begin_layout Standard
Our code aims to compute (an approximation of) 
\begin_inset Formula $\int_{a}^{b}f(x)dx$
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/stefan/akad/voordragte/2010/trento/cython/sketse/LeftRiemann2.png
	lyxscale 30
	width 60text%

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

More Segments
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/stefan/akad/voordragte/2010/trento/cython/sketse/LeftRiemann.png
	height 60theight%

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Benchmark Python Code
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.2in
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

from __future__ import division
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

    return x**4 - 3 * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def integrate_f(a, b, N):
\end_layout

\begin_layout Plain Layout

    """Rectangle integration of a function.
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    Parameters
\end_layout

\begin_layout Plain Layout

    ----------
\end_layout

\begin_layout Plain Layout

    a, b : ints
\end_layout

\begin_layout Plain Layout

        Interval over which to integrate.
\end_layout

\begin_layout Plain Layout

    N : int
\end_layout

\begin_layout Plain Layout

        Number of intervals to use in the discretisation.
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    """
\end_layout

\begin_layout Plain Layout

    s = 0
\end_layout

\begin_layout Plain Layout

    dx = (b - a) / N
\end_layout

\begin_layout Plain Layout

    for i in range(N):
\end_layout

\begin_layout Plain Layout

        s += f(a + i * dx)
\end_layout

\begin_layout Plain Layout

    return s * dx
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Apply Cython to the Python code
\end_layout

\begin_layout Itemize

\family typewriter
cython filename.
\family default
[py|pyx]
\end_layout

\begin_layout Itemize
What is happening behind the scenes? 
\family typewriter
cython -a filename.[py|pyx]
\end_layout

\begin_layout Itemize
Cython translates Python to C, using the Python C API (let's have a look)
\end_layout

\begin_layout Itemize
Cython has a basic type inferencing engine, it is very conservative for
 safety reasons.
\end_layout

\begin_layout Itemize
This code has some serious 
\emph on
bottlenecks.
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Compile generated code
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.15in
\end_inset

In 
\family typewriter
setup.py
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

from distutils.core import setup
\end_layout

\begin_layout Plain Layout

from distutils.extension import Extension
\end_layout

\begin_layout Plain Layout

from Cython.Distutils import build_ext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setup(
\end_layout

\begin_layout Plain Layout

  cmdclass = {'build_ext': build_ext},
\end_layout

\begin_layout Plain Layout

  ext_modules = [
\end_layout

\begin_layout Plain Layout

    Extension("integrate_cy",
\end_layout

\begin_layout Plain Layout

              ["integrate.py"],
\end_layout

\begin_layout Plain Layout

             ),
\end_layout

\begin_layout Plain Layout

  ])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Run using 
\family typewriter
python setup.py build_ext -i.
 This means: build extensions 
\begin_inset Quotes fld
\end_inset

in-place
\begin_inset Quotes frd
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
If no extra C libraries or special build setup are needed, you may use pyximport
 to automagically compile 
\family typewriter
.pyx 
\family default
files:
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard

\family typewriter
>>> import pyximport; pyximport.install()
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Benchmark the new code
\end_layout

\begin_layout Itemize

\family typewriter
Use IPython's %timeit
\family default
 (could do this manually using 
\family typewriter
from timeit import timeit; timeit(...))
\end_layout

\begin_layout Itemize
Slight speed increase (
\begin_inset Formula $\approx1.4\times$
\end_inset

) probably not worth it.
 
\end_layout

\begin_layout Itemize
Can we help Cython to do even better?
\end_layout

\begin_deeper
\begin_layout Itemize
Yes---by giving it some clues.
\end_layout

\end_deeper
\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Annotate Types using Decorators (Pure Python)
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.25in
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{
\backslash
# This code still runs under Python!}`
\end_layout

\begin_layout Plain Layout

from __future__ import division
\end_layout

\begin_layout Plain Layout

import cython
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{@cython.locals(x=cython.double)}`
\end_layout

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

   return x**4 - 3 * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{@cython.locals(a=cython.double, b=cython.double,}`
\end_layout

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 N=cython.int, s=cython.double,}`
\end_layout

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 
\backslash
 dx=cython.double, i=cython.int)}`
\end_layout

\begin_layout Plain Layout

def integrate_f(a, b, N):
\end_layout

\begin_layout Plain Layout

    """Rectangle integration of a function.
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    """
\end_layout

\begin_layout Plain Layout

    s = 0
\end_layout

\begin_layout Plain Layout

    dx = (b - a) / N
\end_layout

\begin_layout Plain Layout

    for i in range(N):
\end_layout

\begin_layout Plain Layout

        s += f(a + i * dx)
\end_layout

\begin_layout Plain Layout

    return s * dx
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset OptArg
status open

\begin_layout Plain Layout
toc=Benchmark,bm=Benchmark
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.1in
\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
Benchmark...
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Alternative syntax
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{
\backslash
# This code DOES NOT run under Python!}`
\end_layout

\begin_layout Plain Layout

from __future__ import division
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f(`
\backslash
colorbox{pink}{double x}`):
\end_layout

\begin_layout Plain Layout

   return x**4 - 3 * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def integrate_f(`
\backslash
colorbox{pink}{double a, double b, int N}`):
\end_layout

\begin_layout Plain Layout

    """Rectangle integration of a function.
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

    """
\end_layout

\begin_layout Plain Layout

    `
\backslash
colorbox{pink}{cdef double s = 0}`
\end_layout

\begin_layout Plain Layout

    `
\backslash
colorbox{pink}{cdef double dx = (b - a) / N}`
\end_layout

\begin_layout Plain Layout

	`
\backslash
colorbox{pink}{cdef int i}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in range(N):
\end_layout

\begin_layout Plain Layout

        s += f(a + i * dx)
\end_layout

\begin_layout Plain Layout

    return s * dx
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Expense of Python Function Calls
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.3in
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

def f(double x):
\end_layout

\begin_layout Plain Layout

   return x**4 - 3 * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def integrate_f(double a, double b, int N):
\end_layout

\begin_layout Plain Layout

    cdef double s = 0
\end_layout

\begin_layout Plain Layout

    cdef double dx = (b - a) / N
\end_layout

\begin_layout Plain Layout

    cdef int i
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in range(N):
\end_layout

\begin_layout Plain Layout

        s += f(a + i * dx)
\end_layout

\begin_layout Plain Layout

    return s * dx
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/stefan/akad/voordragte/2010/trento/cython/sketse/code_flow_python_vs_C.png
	lyxscale 40
	width 80text%

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

The Last Bottlenecks
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{
\backslash
# cython:
\backslash
 cdivision=True}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{cdef double}` f(double x):
\end_layout

\begin_layout Plain Layout

    return `
\backslash
colorbox{pink}{x*x*x*x}` - 3 * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def integrate_f(double a, double b, int N):
\end_layout

\begin_layout Plain Layout

    cdef double s = 0
\end_layout

\begin_layout Plain Layout

    cdef double dx = (b - a) / N
\end_layout

\begin_layout Plain Layout

    cdef int i
\end_layout

\begin_layout Plain Layout

    for i in range(N):
\end_layout

\begin_layout Plain Layout

        s += f(a + i * dx)
\end_layout

\begin_layout Plain Layout

    return s * dx
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.1in
\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
Benchmark!
\end_layout

\begin_layout WideSlide
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.1in
\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
Exploring Cython Further
\end_layout

\begin_layout Section
Handling NumPy Arrays
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Build Setup for Numpy
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

from distutils.core import setup
\end_layout

\begin_layout Plain Layout

from distutils.extension import Extension
\end_layout

\begin_layout Plain Layout

from Cython.Distutils import build_ext
\end_layout

\begin_layout Plain Layout

import numpy
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setup(
\end_layout

\begin_layout Plain Layout

  cmdclass = {'build_ext': build_ext},
\end_layout

\begin_layout Plain Layout

  ext_modules = [
\end_layout

\begin_layout Plain Layout

    Extension("matmul",
\end_layout

\begin_layout Plain Layout

              ["matmul.py"],
\end_layout

\begin_layout Plain Layout

              `
\backslash
colorbox{pink}{include
\backslash
_dirs=[numpy.get
\backslash
_include()]}`,
\end_layout

\begin_layout Plain Layout

             ),
\end_layout

\begin_layout Plain Layout

  ])
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Declaring the Array Type
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{cimport numpy as np}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def foo(`
\backslash
colorbox{pink}{np.ndarray[np.float64
\backslash
_t, ndim=2] arr}`):
\end_layout

\begin_layout Plain Layout

    cdef int i, j
\end_layout

\begin_layout Plain Layout

    for i in range(`
\backslash
colorbox{pink}{arr.shape[0]}`):
\end_layout

\begin_layout Plain Layout

        for j in range(arr.shape[1]):
\end_layout

\begin_layout Plain Layout

            `
\backslash
colorbox{pink}{arr[i, j] = i + j}`
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Different types are defined in the file 
\family typewriter
/usr/share/pyshared/Cython/Includes/numpy.pxd
\family default
 on your virtual machines.
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Matrix Multiplication
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

out = np.zeros(A.shape[0], B.shape[1])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Take each row of A
\end_layout

\begin_layout Plain Layout

for i in range(0, A.shape[0]):
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # And multiply by every column of B
\end_layout

\begin_layout Plain Layout

    for j in range(B.shape[1]):
\end_layout

\begin_layout Plain Layout

        s = 0
\end_layout

\begin_layout Plain Layout

        for k in 
\backslash

\end_layout

\begin_layout Plain Layout

            range(A.shape[1]):
\end_layout

\begin_layout Plain Layout

            s += A[i, k] *
\end_layout

\begin_layout Plain Layout

                 B[k, j]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        out[i, j] = s
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace -1in
\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 2.25in
\end_inset


\begin_inset Graphics
	filename ../sketse/matmul.png
	width 45text%

\end_inset


\end_layout

\begin_layout Plain Layout

\size scriptsize
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Image credits: http://en.wikipedia.org/wiki/File:Matrix_multiplication_diagram_2.sv
g
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Our Own MatMul
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.2in
\end_inset


\end_layout

\begin_layout Standard
We won't even try this in pure Python (way too slow).
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{cimport numpy as np}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def matmul(`
\backslash
colorbox{pink}{np.ndarray[np.float64
\backslash
_t, ndim=2] A,}`
\end_layout

\begin_layout Plain Layout

           `
\backslash
colorbox{pink}{np.ndarray[np.float64
\backslash
_t, ndim=2] B,}`
\end_layout

\begin_layout Plain Layout

           `
\backslash
colorbox{pink}{np.ndarray[np.float64
\backslash
_t, ndim=2] out):}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    `
\backslash
colorbox{pink}{cdef int i, j, k}`
\end_layout

\begin_layout Plain Layout

    `
\backslash
colorbox{pink}{cdef np.float64
\backslash
_t s}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # Take each row of A
\end_layout

\begin_layout Plain Layout

    for i in range(0, A.shape[0]):
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # And multiply by every column of B
\end_layout

\begin_layout Plain Layout

        for j in range(B.shape[1]):
\end_layout

\begin_layout Plain Layout

            s = 0
\end_layout

\begin_layout Plain Layout

            for k in range(A.shape[1]):
\end_layout

\begin_layout Plain Layout

                s += A[i, k] * B[k, j]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            out[i, j] = s
\end_layout

\end_inset


\end_layout

\begin_layout Section
Parallel Threads with Cython
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Averting the Global Interpreter Lock
\end_layout

\begin_layout Standard
\begin_inset VSpace -0.25in
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

`
\backslash
colorbox{pink}{@cython.boundscheck(False)}`
\end_layout

\begin_layout Plain Layout

def matmul_partitioned(int start, int end,
\end_layout

\begin_layout Plain Layout

               np.ndarray[np.float64_t, ndim=2] A,
\end_layout

\begin_layout Plain Layout

               np.ndarray[np.float64_t, ndim=2] B,
\end_layout

\begin_layout Plain Layout

               np.ndarray[np.float64_t, ndim=2] out):
\end_layout

\begin_layout Plain Layout

    cdef int i, j, k
\end_layout

\begin_layout Plain Layout

    cdef np.float64_t s
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    `
\backslash
colorbox{pink}{with nogil:}`
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # Take a selected few rows from A
\end_layout

\begin_layout Plain Layout

        for i in range(start, end):
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            # And multiply each column of B
\end_layout

\begin_layout Plain Layout

            for j in range(B.shape[1]):
\end_layout

\begin_layout Plain Layout

                s = 0
\end_layout

\begin_layout Plain Layout

                for k in range(A.shape[1]):
\end_layout

\begin_layout Plain Layout

                    s += A[i, k] * B[k, j]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                out[i, j] = s
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Set Up Threads
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

A = np.random.random((800, 200))
\end_layout

\begin_layout Plain Layout

B = np.random.random((200, 300))
\end_layout

\begin_layout Plain Layout

C = np.zeros((800, 300))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

N = len(A)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a = threading.Thread(target=matmul_partitioned,
\end_layout

\begin_layout Plain Layout

                     args=(0, N//2, A, B, C))
\end_layout

\begin_layout Plain Layout

b = threading.Thread(target=matmul_partitioned,
\end_layout

\begin_layout Plain Layout

                     args=(N//2, N, A, B, C))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

a.start()
\end_layout

\begin_layout Plain Layout

b.start()
\end_layout

\begin_layout Plain Layout

a.join()
\end_layout

\begin_layout Plain Layout

b.join()
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.1in
\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
Benchmark!
\end_layout

\begin_layout Section
Wrapping C Libraries
\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

External Definitions
\end_layout

\begin_layout Standard
Create a file, 
\family typewriter
trig.pyx
\family default
, with the following content:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

cdef extern from "math.h":
\end_layout

\begin_layout Plain Layout

    double cos(double x)
\end_layout

\begin_layout Plain Layout

    double sin(double x)
\end_layout

\begin_layout Plain Layout

    double tan(double x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    double M_PI
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def test_trig():
\end_layout

\begin_layout Plain Layout

    print 'Some trig functions from C:', 
\backslash

\end_layout

\begin_layout Plain Layout

          cos(0), cos(M_PI)
\end_layout

\end_inset


\end_layout

\begin_layout Slide
\begin_inset OptArg
status open

\begin_layout Plain Layout
method=direct
\end_layout

\end_inset

Build: Link Math Library
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "escapechar={`},language=Python,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

from distutils.core import setup
\end_layout

\begin_layout Plain Layout

from distutils.extension import Extension
\end_layout

\begin_layout Plain Layout

from Cython.Distutils import build_ext
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setup(
\end_layout

\begin_layout Plain Layout

    cmdclass = {'build_ext': build_ext},
\end_layout

\begin_layout Plain Layout

    ext_modules = [
\end_layout

\begin_layout Plain Layout

        Extension("trig" ,
\end_layout

\begin_layout Plain Layout

                  ["trig.pyx"],
\end_layout

\begin_layout Plain Layout

                  `
\backslash
colorbox{pink}{libraries=["m"]}`,
\end_layout

\begin_layout Plain Layout

        ),
\end_layout

\begin_layout Plain Layout

])
\end_layout

\end_inset


\end_layout

\begin_layout WideSlide
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1.1in
\end_inset


\end_layout

\begin_layout Standard
\align center

\size huge
Exercises
\end_layout

\begin_layout EndSlide

\end_layout

\end_body
\end_document
